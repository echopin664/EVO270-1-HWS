esphome:
  name: esphome-web-b69cec
  friendly_name: ESP32 Atom S3 Lite HWS
  min_version: 2024.11.0
  name_add_mac_suffix: false

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

# Enable logging
logger:
  level: VERY_VERBOSE
  logs:
    modbus_controller: VERY_VERBOSE
    uart: VERY_VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: !secret hws_encryption
    

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: !secret hws_ip_address

# Enable Web server.
web_server:
  port: 80

# RS485 UART Configuration
uart:
  id: uart_bus
  rx_pin: GPIO5  
  tx_pin: GPIO6  
  baud_rate: 9600  
  data_bits: 8
  parity: NONE
  stop_bits: 1
  rx_buffer_size: 256  
  debug:
    direction: BOTH  # Show both TX and RX data
    dummy_receiver: false


# Add the Modbus controller
modbus:
  id: hws_modbus
  uart_id: uart_bus

# Sensors and controls for your hot water system
modbus_controller:
  - id: device_addr_1
    address: 99
    modbus_id: hws_modbus
    setup_priority: -10

# Global variable to store the 16-bit status
globals:
  - id: status_register
    type: uint16_t
    initial_value: '0'

    
sensor:
  - platform: wifi_signal
    name: "WiFi Signal db"
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: uptime
    name: "Device Uptime"
    id: uptime_sensor
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Ambient Temperature"
    id: ambient_temp
    register_type: holding
    address: 2019
    value_type: U_WORD
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: return (x-60)*0.5;

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Bottom Tank Temperature"
    id: bottom_tank_temp
    register_type: holding
    address: 2020
    value_type: U_WORD
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: return (x-60)*0.5;

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Top Tank Temperature"
    id: top_tank_temp
    register_type: holding
    address: 2021
    value_type: U_WORD
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: return (x-60)*0.5;

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Coil Temperature"
    id: coil_temp
    register_type: holding
    address: 2022
    value_type: U_WORD
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: return (x-60)*0.5;

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Suction Temperature"
    id: suction_temp
    register_type: holding
    address: 2023
    value_type: U_WORD
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - lambda: return (x-60)*0.5;

  # Target Temperature
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Target Temperature"
    id: target_temp
    register_type: holding
    address: 1104
    value_type: U_WORD
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    filters:
      - lambda: return (x-60)*0.5;

  # Disinfection Target Temperature
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Disinfection Target Temperature"
    id: disinfection_target_temp
    register_type: holding
    address: 1046
    value_type: U_WORD
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    filters:
      - lambda: return (x-60)*0.5;

  # Booster Mode
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Booster Mode"
    register_type: holding
    address: 1014
    value_type: U_WORD

  # Ventilation Mode
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Ventilation Mode"
    register_type: holding
    address: 1016
    value_type: U_WORD


  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Status Register"
    id: raw_status
    register_type: holding
    address: 2050
    value_type: U_WORD
    internal: true  # Hide from HA, only used internally
    on_value:
      then:
        - lambda: |-
            // Update global variable when new value is read
            id(status_register) = (uint16_t)x;

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Current Operation Mode Value"
    id: current_mode_value
    register_type: holding
    address: 1013
    value_type: U_WORD
    internal: true  # Hide raw value from HA
    on_value:
      then:
        - text_sensor.template.publish:
            id: current_mode_text
            state: !lambda |-
              int mode = (int)x;
              switch(mode) {
                case 0: return std::string("Intelligent Mode");
                case 2: return std::string("Economic Mode");
                case 3: return std::string("Hybrid Mode");
                case 4: return std::string("High Demand Mode");
                default: return std::string("Unknown Mode (" + to_string(mode) + ")");
              }
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Compressor Top Tank Sensor Control Enable"
    id: top_tank_control_compressor
    register_type: holding
    address: 1120
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 1 ON Hour (Current)"
    id: timer1_on_hour_current
    register_type: holding
    address: 1134
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 1 ON Minute (Current)"
    id: timer1_on_minute_current
    register_type: holding
    address: 1135
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 1 OFF Hour (Current)"
    id: timer1_off_hour_current
    register_type: holding
    address: 1136
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 1 OFF Minute (Current)"
    id: timer1_off_minute_current
    register_type: holding
    address: 1137
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 2 ON Hour (Current)"
    id: timer2_on_hour_current
    register_type: holding
    address: 1138
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 2 ON Minute (Current)"
    id: timer2_on_minute_current
    register_type: holding
    address: 1139
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 2 OFF Hour (Current)"
    id: timer2_off_hour_current
    register_type: holding
    address: 1140
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 2 OFF Minute (Current)"
    id: timer2_off_minute_current
    register_type: holding
    address: 1141
    value_type: U_WORD
    internal: true



    
number:
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Set Target Temperature"
    id: set_target_temp
    register_type: holding
    address: 1104
    value_type: U_WORD
    min_value: 10
    max_value: 75
    step: 1
    write_lambda: |-
      return (x*2) + 60;  

    # Duration of Disinfection
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Disinfection Duration"
    id: disinfection_duration
    register_type: holding
    address: 1047
    value_type: U_WORD
    unit_of_measurement: "min"
    min_value: 0
    max_value: 90
    step: 1
    mode: box  # This creates an input box instead of slider
    icon: "mdi:heat-wave"

  # Disinfection Start Hour
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Disinfection Start Hour"
    id: disinfection_start
    register_type: holding
    address: 1048
    value_type: U_WORD
    unit_of_measurement: "hour"
    min_value: 0
    max_value: 23
    step: 1
    mode: box  # This creates an input box instead of slider
    icon: "mdi:heat-wave"

  # Disinfection days
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Disinfection Days"
    id: disinfection_days
    register_type: holding
    address: 1049
    value_type: U_WORD
    unit_of_measurement: "days"
    min_value: 1
    max_value: 99
    step: 1
    mode: box  # This creates an input box instead of slider
    icon: "mdi:heat-wave"

switch:
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Heat Pump Power"
    id: heat_pump_power
    register_type: holding
    address: 1011
    bitmask: 0x0001  # Only use bit 0 since it's 0/1 value
    icon: "mdi:power"

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 1 ON Enable"
    id: timer1_on_enable
    register_type: holding
    address: 1133
    bitmask: 0x0001  # Bit 0
    icon: "mdi:timer-outline"

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 1 OFF Enable"
    id: timer1_off_enable
    register_type: holding
    address: 1133
    bitmask: 0x0002  # Bit 1
    icon: "mdi:timer-outline"

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 2 ON Enable"
    id: timer2_on_enable
    register_type: holding
    address: 1133
    bitmask: 0x0004  # Bit 2
    icon: "mdi:timer-outline"

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 2 OFF Enable"
    id: timer2_off_enable
    register_type: holding
    address: 1133
    bitmask: 0x0008  # Bit 3
    icon: "mdi:timer-outline"



# Binary sensors for each bit
binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Heat Pump Power Status"
    id: power_status
    register_type: holding
    address: 1011
    bitmask: 0x0001
    device_class: power


  # Input Status Bits (0-7)
  - platform: template
    name: "Remote ON/OFF Switch"
    id: s01_remote_switch
    lambda: 'return (id(status_register) & 0x0001) != 0;'  # Bit 0
    
  - platform: template
    name: "Low Pressure Switch"
    id: s03_low_pressure
    lambda: 'return (id(status_register) & 0x0004) != 0;'  # Bit 2
    
  - platform: template
    name: "High Pressure Switch"
    id: s04_high_pressure
    lambda: 'return (id(status_register) & 0x0008) != 0;'  # Bit 3
    
  - platform: template
    name: "Shortened Time Signal"
    id: s05_short_time
    lambda: 'return (id(status_register) & 0x0010) != 0;'  # Bit 4
    
  - platform: template
    name: "External Heat Source Switch"
    id: s06_ext_heat
    lambda: 'return (id(status_register) & 0x0020) != 0;'  # Bit 5

  # Output Status Bits (8-15)
  - platform: template
    name: "Compressor"
    id: o01_compressor
    lambda: 'return (id(status_register) & 0x0100) != 0;'  # Bit 8
    device_class: running
    
  - platform: template
    name: "Electrical Heater"
    id: o02_elec_heater
    lambda: 'return (id(status_register) & 0x0200) != 0;'  # Bit 9
    device_class: heat
    icon: "mdi:heating-coil"
    
  - platform: template
    name: "4-Way Valve"
    id: o03_4way_valve
    lambda: 'return (id(status_register) & 0x0400) != 0;'  # Bit 10
    
  - platform: template
    name: "Fan High Speed"
    id: o04_fan_high
    lambda: 'return (id(status_register) & 0x0800) != 0;'  # Bit 11
    
  - platform: template
    name: "Fan Low Speed/Solar Pump"
    id: o05_fan_low_solar
    lambda: 'return (id(status_register) & 0x1000) != 0;'  # Bit 12
    device_class: running
    
  - platform: template
    name: "Solar Pump/Solar Valve Pump"
    id: o06_solar_pump_valve
    lambda: 'return (id(status_register) & 0x2000) != 0;'  # Bit 13
    device_class: running
    
  - platform: template
    name: "Electric Anode 3V"
    id: o12_anode_3v
    lambda: 'return (id(status_register) & 0x4000) != 0;'  # Bit 14
    
  - platform: template
    name: "Electric Anode MV"
    id: o13_anode_mv
    lambda: 'return (id(status_register) & 0x8000) != 0;'  # Bit 15

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 1 ON Status"
    id: timer1_on_status
    register_type: holding
    address: 1133
    bitmask: 0x0001  # Bit 0
    icon: "mdi:timer-check-outline"

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 1 OFF Status"
    id: timer1_off_status
    register_type: holding
    address: 1133
    bitmask: 0x0002  # Bit 1
    icon: "mdi:timer-check-outline"

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 2 ON Status"
    id: timer2_on_status
    register_type: holding
    address: 1133
    bitmask: 0x0004  # Bit 2
    icon: "mdi:timer-check-outline"

  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Timer 2 OFF Status"
    id: timer2_off_status
    register_type: holding
    address: 1133
    bitmask: 0x0008  # Bit 3
    icon: "mdi:timer-check-outline"

# Operation Mode Select Control
select:
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Operation Mode"
    id: operation_mode
    address: 1013
    value_type: U_WORD
    optionsmap:
      "Intelligent Mode": 0
      "Economic Mode": 2
      "Hybrid Mode": 3
      "High Demand Mode": 4
  
  - platform: modbus_controller
    modbus_controller_id: device_addr_1
    name: "Booster Control"
    id: booster_control
    address: 1014
    value_type: U_WORD
    optionsmap:
      "Not Selected": 0
      "Running": 1
      "Stop": 2

text_sensor:
  - platform: template
    name: "Current Operation Mode"
    id: current_mode_text
    lambda: |-
      int mode = id(current_mode_value).state;
      switch(mode) {
        case 0: return {"Intelligent Mode"};
        case 2: return {"Economic Mode"};
        case 3: return {"Hybrid Mode"};
        case 4: return {"High Demand Mode"};
        default: return {"Unknown Mode (" + to_string(mode) + ")"};
      }
    update_interval: never  # Only update when sensor changes

  - platform: template
    name: "Timer 1 ON Time (Display)"
    id: timer1_on_display
    lambda: |-
      int hour = id(timer1_on_hour_current).state;
      int minute = id(timer1_on_minute_current).state;
      return str_sprintf("%02d:%02d", hour, minute);
    update_interval: 5s

  - platform: template
    name: "Timer 1 OFF Time (Display)"
    id: timer1_off_display
    lambda: |-
      int hour = id(timer1_off_hour_current).state;
      int minute = id(timer1_off_minute_current).state;
      return str_sprintf("%02d:%02d", hour, minute);
    update_interval: 5s

  - platform: template
    name: "Timer 2 ON Time (Display)"
    id: timer2_on_display
    lambda: |-
      int hour = id(timer2_on_hour_current).state;
      int minute = id(timer2_on_minute_current).state;
      return str_sprintf("%02d:%02d", hour, minute);
    update_interval: 5s

  - platform: template
    name: "Timer 2 OFF Time (Display)"
    id: timer2_off_display
    lambda: |-
      int hour = id(timer2_off_hour_current).state;
      int minute = id(timer2_off_minute_current).state;
      return str_sprintf("%02d:%02d", hour, minute);
    update_interval: 5s

    
# Update text sensor when mode value changes
  - platform: template
    name: "Modbus Status"
    lambda: |-
      return {"Connected"};
    update_interval: 5s

datetime:
  - platform: template
    name: "Timer 1 ON Time"
    id: timer1_on_time
    type: time
    optimistic: true
    restore_value: true
    initial_value: "06:00:00"
    set_action:
      - lambda: |-
          // The 'x' parameter contains the NEW time value being set
          auto time_components = x;  // x is the ESPTime being set
          int hours = time_components.hour;
          int minutes = time_components.minute;
          
          ESP_LOGD("timer", "Setting Timer 1 ON to %02d:%02d", hours, minutes);
          
          // Write to Modbus registers
          esphome::modbus_controller::ModbusCommandItem write_hour_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              id(device_addr_1), 1134, hours);
          id(device_addr_1)->queue_command(write_hour_cmd);
          
          esphome::modbus_controller::ModbusCommandItem write_min_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              id(device_addr_1), 1135, minutes);
          id(device_addr_1)->queue_command(write_min_cmd);

  - platform: template
    name: "Timer 1 OFF Time"
    id: timer1_off_time
    type: time
    optimistic: true
    restore_value: true
    initial_value: "22:00:00"
    set_action:
      - lambda: |-
          auto time_components = x;  // x contains the NEW time value
          int hours = time_components.hour;
          int minutes = time_components.minute;
          
          ESP_LOGD("timer", "Setting Timer 1 OFF to %02d:%02d", hours, minutes);
          
          esphome::modbus_controller::ModbusCommandItem write_hour_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              id(device_addr_1), 1136, hours);
          id(device_addr_1)->queue_command(write_hour_cmd);
          
          esphome::modbus_controller::ModbusCommandItem write_min_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              id(device_addr_1), 1137, minutes);
          id(device_addr_1)->queue_command(write_min_cmd);

  - platform: template
    name: "Timer 2 ON Time"
    id: timer2_on_time
    type: time
    optimistic: true
    restore_value: true
    initial_value: "12:00:00"
    set_action:
      - lambda: |-
          auto time_components = x;  // x contains the NEW time value
          int hours = time_components.hour;
          int minutes = time_components.minute;
          
          ESP_LOGD("timer", "Setting Timer 2 ON to %02d:%02d", hours, minutes);
          
          esphome::modbus_controller::ModbusCommandItem write_hour_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              id(device_addr_1), 1138, hours);
          id(device_addr_1)->queue_command(write_hour_cmd);
          
          esphome::modbus_controller::ModbusCommandItem write_min_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              id(device_addr_1), 1139, minutes);
          id(device_addr_1)->queue_command(write_min_cmd);

  - platform: template
    name: "Timer 2 OFF Time"
    id: timer2_off_time
    type: time
    optimistic: true
    restore_value: true
    initial_value: "14:00:00"
    set_action:
      - lambda: |-
          auto time_components = x;  // x contains the NEW time value
          int hours = time_components.hour;
          int minutes = time_components.minute;
          
          ESP_LOGD("timer", "Setting Timer 2 OFF to %02d:%02d", hours, minutes);
          
          esphome::modbus_controller::ModbusCommandItem write_hour_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              id(device_addr_1), 1140, hours);
          id(device_addr_1)->queue_command(write_hour_cmd);
          
          esphome::modbus_controller::ModbusCommandItem write_min_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              id(device_addr_1), 1141, minutes);
          id(device_addr_1)->queue_command(write_min_cmd);
